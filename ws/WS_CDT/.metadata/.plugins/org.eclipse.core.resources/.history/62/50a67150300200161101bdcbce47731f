/*******************************************************************************
 * Copyright (c) 2012, 2013 IBM Corp.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution. 
 *
 * The Eclipse Public License is available at 
 *   http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at 
 *   http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *    Ian Craggs - initial contribution
 *******************************************************************************/

#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "MQTTAsync.h"

#if !defined(WIN32)
#include <unistd.h>
#endif


#define ADDRESS     "tcp://localhost:1883"
#define CLIENTID    "test"
#define TOPIC       "g"
#define PAYLOAD     "Hello World!"
#define QOS         1
#define TIMEOUT     10000L

volatile MQTTAsync_token deliveredtoken;



void connlostMyPublisher(void *context, char *cause)
{
	MQTTAsync client = (MQTTAsync)context;
	MQTTAsync_connectOptions conn_opts = MQTTAsync_connectOptions_initializer;
	int rc;

	printf("\nConnection lost\n");
	printf("     cause: %s\n", cause);

	printf("Reconnecting\n");
	conn_opts.keepAliveInterval = 20;
	conn_opts.cleansession = 1;
	if ((rc = MQTTAsync_connect(client, &conn_opts)) != MQTTASYNC_SUCCESS)
	{
		printf("Failed to start connect, return code %d\n", rc);

	}
}






void onConnectMyPublisher(void* context, MQTTAsync_successData* response)
{
	printf("\n Connected");
}

void onConnectFailureMyPublisher(void* context, MQTTAsync_failureData* response)
{
	printf("\n Connection Failed");

}





MQTTAsync client;
int main(int argc, char* argv[])
{

	int rc;

	MQTTAsync_connectOptions opts = MQTTAsync_connectOptions_initializer;

	MQTTAsync_responseOptions conn_opts = MQTTAsync_responseOptions_initializer;
	MQTTAsync_message pubmsg = MQTTAsync_message_initializer;
	MQTTAsync_token token;

	MQTTAsync_create(&client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, NULL);

	MQTTAsync_setCallbacks(client, NULL, connlostMyPublisher, NULL, NULL);


	opts.keepAliveInterval = 20;
	opts.cleansession = 1;
	opts.onSuccess = onConnectMyPublisher;
	opts.onFailure = onConnectFailureMyPublisher;
	opts.context = client;
	rc = MQTTAsync_connect(client, &opts);

	pubmsg.payload = PAYLOAD;
	pubmsg.payloadlen = strlen(PAYLOAD);
	pubmsg.qos = QOS;
	pubmsg.retained = 0;
	deliveredtoken = 0;

	conn_opts.onSuccess = onConnectMyPublisher;
	conn_opts.onFailure = onConnectFailureMyPublisher;
	conn_opts.context = client;

	rc = MQTTAsync_sendMessage(client, TOPIC, &pubmsg, &conn_opts);

	 while (1) {

	 }
		/*
	 while (1) {
			int c = getchar();
			if (c == 'e'){
				break;
			} else if(c=='s'){
				printf("\n Sending again \n");

				if ((rc = MQTTAsync_sendMessage(client, TOPIC, &pubmsg, &conn_opts)) != MQTTASYNC_SUCCESS)
				 {
				 			printf("---Failed to start sendMessage, return code %d\n", rc);

				 }
			}
		}
*/


 	return rc;
}

