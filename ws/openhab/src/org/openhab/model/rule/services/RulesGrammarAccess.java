/*
* generated by Xtext
*/

package org.openhab.model.rule.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.openhab.model.script.services.ScriptGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class RulesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesXVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//RuleModel:
		//
		//	imports+=Import* variables+=XVariableDeclaration* rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* variables+=XVariableDeclaration* rules+=Rule*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//variables+=XVariableDeclaration*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//XVariableDeclaration
		public RuleCall getVariablesXVariableDeclarationParserRuleCall_1_0() { return cVariablesXVariableDeclarationParserRuleCall_1_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventtriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventtriggerEventTriggerParserRuleCall_3_0 = (RuleCall)cEventtriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventtriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventtriggerEventTriggerParserRuleCall_4_1_0 = (RuleCall)cEventtriggerAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cScriptAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScriptScriptParserRuleCall_6_0 = (RuleCall)cScriptAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule:
		//
		//	"rule" name=(ID | STRING) "when" eventtrigger+=EventTrigger ("or" eventtrigger+=EventTrigger)* "then" script=Script
		//
		//	"end";
		public ParserRule getRule() { return rule; }

		//"rule" name=(ID | STRING) "when" eventtrigger+=EventTrigger ("or" eventtrigger+=EventTrigger)* "then" script=Script
		//
		//"end"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=(ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | STRING
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//eventtrigger+=EventTrigger
		public Assignment getEventtriggerAssignment_3() { return cEventtriggerAssignment_3; }

		//EventTrigger
		public RuleCall getEventtriggerEventTriggerParserRuleCall_3_0() { return cEventtriggerEventTriggerParserRuleCall_3_0; }

		//("or" eventtrigger+=EventTrigger)*
		public Group getGroup_4() { return cGroup_4; }

		//"or"
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }

		//eventtrigger+=EventTrigger
		public Assignment getEventtriggerAssignment_4_1() { return cEventtriggerAssignment_4_1; }

		//EventTrigger
		public RuleCall getEventtriggerEventTriggerParserRuleCall_4_1_0() { return cEventtriggerEventTriggerParserRuleCall_4_1_0; }

		//"then"
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }

		//script=Script
		public Assignment getScriptAssignment_6() { return cScriptAssignment_6; }

		//Script
		public RuleCall getScriptScriptParserRuleCall_6_0() { return cScriptScriptParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class EventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpdateEventTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandEventTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangedEventTriggerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimerTriggerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSystemTriggerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EventTrigger:
		//
		//	UpdateEventTrigger | CommandEventTrigger | ChangedEventTrigger | TimerTrigger | SystemTrigger;
		public ParserRule getRule() { return rule; }

		//UpdateEventTrigger | CommandEventTrigger | ChangedEventTrigger | TimerTrigger | SystemTrigger
		public Alternatives getAlternatives() { return cAlternatives; }

		//UpdateEventTrigger
		public RuleCall getUpdateEventTriggerParserRuleCall_0() { return cUpdateEventTriggerParserRuleCall_0; }

		//CommandEventTrigger
		public RuleCall getCommandEventTriggerParserRuleCall_1() { return cCommandEventTriggerParserRuleCall_1; }

		//ChangedEventTrigger
		public RuleCall getChangedEventTriggerParserRuleCall_2() { return cChangedEventTriggerParserRuleCall_2; }

		//TimerTrigger
		public RuleCall getTimerTriggerParserRuleCall_3() { return cTimerTriggerParserRuleCall_3; }

		//SystemTrigger
		public RuleCall getSystemTriggerParserRuleCall_4() { return cSystemTriggerParserRuleCall_4; }
	}

	public class CommandEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cReceivedCommandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandValidCommandParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		
		//CommandEventTrigger:
		//
		//	"Item" item=ItemName "received command" command=ValidCommand?;
		public ParserRule getRule() { return rule; }

		//"Item" item=ItemName "received command" command=ValidCommand?
		public Group getGroup() { return cGroup; }

		//"Item"
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }

		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }

		//"received command"
		public Keyword getReceivedCommandKeyword_2() { return cReceivedCommandKeyword_2; }

		//command=ValidCommand?
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }

		//ValidCommand
		public RuleCall getCommandValidCommandParserRuleCall_3_0() { return cCommandValidCommandParserRuleCall_3_0; }
	}

	public class UpdateEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cReceivedUpdateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateValidStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//UpdateEventTrigger:
		//
		//	"Item" item=ItemName "received update" state=ValidState?;
		public ParserRule getRule() { return rule; }

		//"Item" item=ItemName "received update" state=ValidState?
		public Group getGroup() { return cGroup; }

		//"Item"
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }

		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }

		//"received update"
		public Keyword getReceivedUpdateKeyword_2() { return cReceivedUpdateKeyword_2; }

		//state=ValidState?
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//ValidState
		public RuleCall getStateValidStateParserRuleCall_3_0() { return cStateValidStateParserRuleCall_3_0; }
	}

	public class ChangedEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangedEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cChangedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOldStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOldStateValidStateParserRuleCall_3_1_0 = (RuleCall)cOldStateAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewStateValidStateParserRuleCall_4_1_0 = (RuleCall)cNewStateAssignment_4_1.eContents().get(0);
		
		//ChangedEventTrigger:
		//
		//	"Item" item=ItemName "changed" ("from" oldState=ValidState)? ("to" newState=ValidState)?;
		public ParserRule getRule() { return rule; }

		//"Item" item=ItemName "changed" ("from" oldState=ValidState)? ("to" newState=ValidState)?
		public Group getGroup() { return cGroup; }

		//"Item"
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }

		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }

		//"changed"
		public Keyword getChangedKeyword_2() { return cChangedKeyword_2; }

		//("from" oldState=ValidState)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//oldState=ValidState
		public Assignment getOldStateAssignment_3_1() { return cOldStateAssignment_3_1; }

		//ValidState
		public RuleCall getOldStateValidStateParserRuleCall_3_1_0() { return cOldStateValidStateParserRuleCall_3_1_0; }

		//("to" newState=ValidState)?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//newState=ValidState
		public Assignment getNewStateAssignment_4_1() { return cNewStateAssignment_4_1; }

		//ValidState
		public RuleCall getNewStateValidStateParserRuleCall_4_1_0() { return cNewStateValidStateParserRuleCall_4_1_0; }
	}

	public class TimerTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimerTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCronKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCronAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCronSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cCronAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTimeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTimeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cTimeAlternatives_1_2_0 = (Alternatives)cTimeAssignment_1_2.eContents().get(0);
		private final Keyword cTimeMidnightKeyword_1_2_0_0 = (Keyword)cTimeAlternatives_1_2_0.eContents().get(0);
		private final Keyword cTimeNoonKeyword_1_2_0_1 = (Keyword)cTimeAlternatives_1_2_0.eContents().get(1);
		
		//TimerTrigger:
		//
		//	"Time" "cron" cron=STRING | "Time" "is" time=("midnight" | "noon");
		public ParserRule getRule() { return rule; }

		//"Time" "cron" cron=STRING | "Time" "is" time=("midnight" | "noon")
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Time" "cron" cron=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"Time"
		public Keyword getTimeKeyword_0_0() { return cTimeKeyword_0_0; }

		//"cron"
		public Keyword getCronKeyword_0_1() { return cCronKeyword_0_1; }

		//cron=STRING
		public Assignment getCronAssignment_0_2() { return cCronAssignment_0_2; }

		//STRING
		public RuleCall getCronSTRINGTerminalRuleCall_0_2_0() { return cCronSTRINGTerminalRuleCall_0_2_0; }

		//"Time" "is" time=("midnight" | "noon")
		public Group getGroup_1() { return cGroup_1; }

		//"Time"
		public Keyword getTimeKeyword_1_0() { return cTimeKeyword_1_0; }

		//"is"
		public Keyword getIsKeyword_1_1() { return cIsKeyword_1_1; }

		//time=("midnight" | "noon")
		public Assignment getTimeAssignment_1_2() { return cTimeAssignment_1_2; }

		//"midnight" | "noon"
		public Alternatives getTimeAlternatives_1_2_0() { return cTimeAlternatives_1_2_0; }

		//"midnight"
		public Keyword getTimeMidnightKeyword_1_2_0_0() { return cTimeMidnightKeyword_1_2_0_0; }

		//"noon"
		public Keyword getTimeNoonKeyword_1_2_0_1() { return cTimeNoonKeyword_1_2_0_1; }
	}

	public class SystemTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemOnStartupTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemOnShutdownTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemTrigger:
		//
		//	SystemOnStartupTrigger | SystemOnShutdownTrigger;
		public ParserRule getRule() { return rule; }

		//SystemOnStartupTrigger | SystemOnShutdownTrigger
		public Alternatives getAlternatives() { return cAlternatives; }

		//SystemOnStartupTrigger
		public RuleCall getSystemOnStartupTriggerParserRuleCall_0() { return cSystemOnStartupTriggerParserRuleCall_0; }

		//SystemOnShutdownTrigger
		public RuleCall getSystemOnShutdownTriggerParserRuleCall_1() { return cSystemOnShutdownTriggerParserRuleCall_1; }
	}

	public class SystemOnStartupTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemOnStartupTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemOnStartupTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SystemOnStartupTrigger:
		//
		//	{SystemOnStartupTrigger} "System" "started";
		public ParserRule getRule() { return rule; }

		//{SystemOnStartupTrigger} "System" "started"
		public Group getGroup() { return cGroup; }

		//{SystemOnStartupTrigger}
		public Action getSystemOnStartupTriggerAction_0() { return cSystemOnStartupTriggerAction_0; }

		//"System"
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }

		//"started"
		public Keyword getStartedKeyword_2() { return cStartedKeyword_2; }
	}

	public class SystemOnShutdownTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemOnShutdownTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemOnShutdownTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cShutsDownKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SystemOnShutdownTrigger:
		//
		//	{SystemOnShutdownTrigger} "System" "shuts down";
		public ParserRule getRule() { return rule; }

		//{SystemOnShutdownTrigger} "System" "shuts down"
		public Group getGroup() { return cGroup; }

		//{SystemOnShutdownTrigger}
		public Action getSystemOnShutdownTriggerAction_0() { return cSystemOnShutdownTriggerAction_0; }

		//"System"
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }

		//"shuts down"
		public Keyword getShutsDownKeyword_2() { return cShutsDownKeyword_2; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class ItemNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ItemName:
		//
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ValidStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidState:
		//
		//	ID | Number | STRING;
		public ParserRule getRule() { return rule; }

		//ID | Number | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class ValidCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidCommand:
		//
		//	ID | Number | STRING;
		public ParserRule getRule() { return rule; }

		//ID | Number | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	
	private RuleModelElements pRuleModel;
	private ImportElements pImport;
	private RuleElements pRule;
	private EventTriggerElements pEventTrigger;
	private CommandEventTriggerElements pCommandEventTrigger;
	private UpdateEventTriggerElements pUpdateEventTrigger;
	private ChangedEventTriggerElements pChangedEventTrigger;
	private TimerTriggerElements pTimerTrigger;
	private SystemTriggerElements pSystemTrigger;
	private SystemOnStartupTriggerElements pSystemOnStartupTrigger;
	private SystemOnShutdownTriggerElements pSystemOnShutdownTrigger;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private ItemNameElements pItemName;
	private ValidStateElements pValidState;
	private ValidCommandElements pValidCommand;
	
	private final Grammar grammar;

	private ScriptGrammarAccess gaScript;

	@Inject
	public RulesGrammarAccess(GrammarProvider grammarProvider,
		ScriptGrammarAccess gaScript) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaScript = gaScript;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.openhab.model.rule.Rules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ScriptGrammarAccess getScriptGrammarAccess() {
		return gaScript;
	}

	
	//RuleModel:
	//
	//	imports+=Import* variables+=XVariableDeclaration* rules+=Rule*;
	public RuleModelElements getRuleModelAccess() {
		return (pRuleModel != null) ? pRuleModel : (pRuleModel = new RuleModelElements());
	}
	
	public ParserRule getRuleModelRule() {
		return getRuleModelAccess().getRule();
	}

	//Import:
	//
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Rule:
	//
	//	"rule" name=(ID | STRING) "when" eventtrigger+=EventTrigger ("or" eventtrigger+=EventTrigger)* "then" script=Script
	//
	//	"end";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//EventTrigger:
	//
	//	UpdateEventTrigger | CommandEventTrigger | ChangedEventTrigger | TimerTrigger | SystemTrigger;
	public EventTriggerElements getEventTriggerAccess() {
		return (pEventTrigger != null) ? pEventTrigger : (pEventTrigger = new EventTriggerElements());
	}
	
	public ParserRule getEventTriggerRule() {
		return getEventTriggerAccess().getRule();
	}

	//CommandEventTrigger:
	//
	//	"Item" item=ItemName "received command" command=ValidCommand?;
	public CommandEventTriggerElements getCommandEventTriggerAccess() {
		return (pCommandEventTrigger != null) ? pCommandEventTrigger : (pCommandEventTrigger = new CommandEventTriggerElements());
	}
	
	public ParserRule getCommandEventTriggerRule() {
		return getCommandEventTriggerAccess().getRule();
	}

	//UpdateEventTrigger:
	//
	//	"Item" item=ItemName "received update" state=ValidState?;
	public UpdateEventTriggerElements getUpdateEventTriggerAccess() {
		return (pUpdateEventTrigger != null) ? pUpdateEventTrigger : (pUpdateEventTrigger = new UpdateEventTriggerElements());
	}
	
	public ParserRule getUpdateEventTriggerRule() {
		return getUpdateEventTriggerAccess().getRule();
	}

	//ChangedEventTrigger:
	//
	//	"Item" item=ItemName "changed" ("from" oldState=ValidState)? ("to" newState=ValidState)?;
	public ChangedEventTriggerElements getChangedEventTriggerAccess() {
		return (pChangedEventTrigger != null) ? pChangedEventTrigger : (pChangedEventTrigger = new ChangedEventTriggerElements());
	}
	
	public ParserRule getChangedEventTriggerRule() {
		return getChangedEventTriggerAccess().getRule();
	}

	//TimerTrigger:
	//
	//	"Time" "cron" cron=STRING | "Time" "is" time=("midnight" | "noon");
	public TimerTriggerElements getTimerTriggerAccess() {
		return (pTimerTrigger != null) ? pTimerTrigger : (pTimerTrigger = new TimerTriggerElements());
	}
	
	public ParserRule getTimerTriggerRule() {
		return getTimerTriggerAccess().getRule();
	}

	//SystemTrigger:
	//
	//	SystemOnStartupTrigger | SystemOnShutdownTrigger;
	public SystemTriggerElements getSystemTriggerAccess() {
		return (pSystemTrigger != null) ? pSystemTrigger : (pSystemTrigger = new SystemTriggerElements());
	}
	
	public ParserRule getSystemTriggerRule() {
		return getSystemTriggerAccess().getRule();
	}

	//SystemOnStartupTrigger:
	//
	//	{SystemOnStartupTrigger} "System" "started";
	public SystemOnStartupTriggerElements getSystemOnStartupTriggerAccess() {
		return (pSystemOnStartupTrigger != null) ? pSystemOnStartupTrigger : (pSystemOnStartupTrigger = new SystemOnStartupTriggerElements());
	}
	
	public ParserRule getSystemOnStartupTriggerRule() {
		return getSystemOnStartupTriggerAccess().getRule();
	}

	//SystemOnShutdownTrigger:
	//
	//	{SystemOnShutdownTrigger} "System" "shuts down";
	public SystemOnShutdownTriggerElements getSystemOnShutdownTriggerAccess() {
		return (pSystemOnShutdownTrigger != null) ? pSystemOnShutdownTrigger : (pSystemOnShutdownTrigger = new SystemOnShutdownTriggerElements());
	}
	
	public ParserRule getSystemOnShutdownTriggerRule() {
		return getSystemOnShutdownTriggerAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//ItemName:
	//
	//	ID;
	public ItemNameElements getItemNameAccess() {
		return (pItemName != null) ? pItemName : (pItemName = new ItemNameElements());
	}
	
	public ParserRule getItemNameRule() {
		return getItemNameAccess().getRule();
	}

	//ValidState:
	//
	//	ID | Number | STRING;
	public ValidStateElements getValidStateAccess() {
		return (pValidState != null) ? pValidState : (pValidState = new ValidStateElements());
	}
	
	public ParserRule getValidStateRule() {
		return getValidStateAccess().getRule();
	}

	//ValidCommand:
	//
	//	ID | Number | STRING;
	public ValidCommandElements getValidCommandAccess() {
		return (pValidCommand != null) ? pValidCommand : (pValidCommand = new ValidCommandElements());
	}
	
	public ParserRule getValidCommandRule() {
		return getValidCommandAccess().getRule();
	}

	//Script returns XBlockExpression:
	//
	//	{Script} expressions+=XExpressionInsideBlock (expressions+=XExpressionInsideBlock ";"?)*;
	public ScriptGrammarAccess.ScriptElements getScriptAccess() {
		return gaScript.getScriptAccess();
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XClosure | XBooleanLiteral | XNullLiteral | XStringLiteral | XNumberLiteral | XTypeLiteral;
	public ScriptGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaScript.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaScript.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaScript.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaScript.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaScript.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaScript.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaScript.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaScript.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaScript.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaScript.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaScript.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaScript.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaScript.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaScript.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaScript.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaScript.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaScript.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaScript.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaScript.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaScript.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaScript.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaScript.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaScript.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaScript.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaScript.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaScript.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaScript.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaScript.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaScript.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaScript.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaScript.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaScript.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaScript.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaScript.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaScript.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaScript.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaScript.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaScript.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaScript.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaScript.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaScript.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//
	//
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//
	//
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	// StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaScript.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaScript.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaScript.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaScript.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaScript.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaScript.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaScript.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaScript.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaScript.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaScript.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaScript.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaScript.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaScript.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaScript.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaScript.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaScript.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaScript.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaScript.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaScript.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaScript.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaScript.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaScript.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaScript.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaScript.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaScript.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaScript.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaScript.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaScript.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaScript.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaScript.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaScript.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaScript.getANY_OTHERRule();
	} 
}
